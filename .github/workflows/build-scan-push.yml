name: Build/Scan/Push Containers

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - wiz-os
    paths:
      - src/**
      - "**.ts"
      - Dockerfile
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  docker_build:
    runs-on: ubuntu-latest
    env:
      WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
      WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./
            image: ${{ vars.IMAGE_REGISTRY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Collect Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get First Docker Tag
        id: first-tag
        run: |
          echo "tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to ECR Container Registry
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.IMAGE_REGISTRY }}

      - name: Build Docker Image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ matrix.dockerfile }}
          load: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan Container with Wiz
        run: |
          curl -Lo wizcli https://wizcli.app.wiz.io/latest/wizcli-linux-amd64
          chmod +x wizcli
          ./wizcli auth
          ./wizcli docker scan --image "${{ steps.first-tag.outputs.tag }}" --dockerfile "${{ matrix.dockerfile }}Dockerfile" \
            -p "Default vulnerabilities policy" \
            -p "Default sensitive data policy" \
            -p "Default secrets policy" \
            -p "Default malware policy"
        continue-on-error: true

      - name: Push Docker Image
        id: push-image
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Pull Image for Wiz Tagging
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          docker pull ${{ steps.first-tag.outputs.tag }}

      - name: Tag Container with Wiz
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          ./wizcli docker tag --image "${{ steps.first-tag.outputs.tag }}"
        continue-on-error: true

      - name: 💾 Install kubectl
        uses: azure/setup-kubectl@v3

      - name: 💾 Install Helm
        uses: azure/setup-helm@v4

      - name: 📡 Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region us-east-1 \
            --name ${{ vars.EKS_CLUSTER}}

      - name: 🌐 Get Backend service DNS
        id: backend-url
        run: |
          BACKEND_SVC=$(kubectl get svc backend-sorcery-solutions-backend -n sorcery -o jsonpath="{.metadata.name}")
          echo "BACKEND_URL=http://${BACKEND_SVC}.sorcery.svc.cluster.local:8000" >> $GITHUB_ENV

      - name: 🚀 Deploy Frontend via Helm with ALB Ingress
        run: |
          helm upgrade --install frontend ./helm/sorcery-solutions-frontend \
            --namespace sorcery \
            --set image.repository="${{ vars.IMAGE_REGISTRY }}/" \
            --set-string env[0].name=NEXT_PUBLIC_API_BASE_URL \
            --set-string env[0].value="${{ env.BACKEND_URL }}" \
            --set service.type=ClusterIP \
            --set service.port=80 \
            --set service.targetPort=3000 \
            --set ingress.enabled=true \
            --set ingress.className=alb \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/scheme"=internet-facing \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/target-type"=ip \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/listen-ports"='[{"HTTP":80}]' \
            --set ingress.hosts[0].host=frontend.sorcery.local \
            --set ingress.hosts[0].paths[0].path="/" \
            --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
            --wait

      - name: 🌐 Wait for ALB Ingress and Output ALB DNS
        run: |
          echo "⏳ Waiting for ALB Ingress..."
          for i in {1..30}; do
            ALB_HOSTNAME=$(kubectl get ingress frontend-sorcery-solutions-frontend -n sorcery -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [[ ! -z "$ALB_HOSTNAME" ]]; then
              echo "✅ ALB Hostname: http://$ALB_HOSTNAME"
              echo "ALB_HOSTNAME=http://$ALB_HOSTNAME" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for ALB hostname..."
            sleep 10
          done

      - name: ✅ Done
        run: |
          echo "Deployment complete! 🎉"
          echo "Frontend exposed at: ${{ env.ALB_HOSTNAME }}"