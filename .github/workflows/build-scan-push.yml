name: Build/Scan/Push Containers

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - wiz-os
    paths:
      - src/**
      - "**.ts"
      - Dockerfile
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: write

jobs:
  sync-lockfile:
    # This job always runs; steps are conditional
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed to push back on same-repo PRs
    steps:
      - uses: actions/checkout@v4
        with:
          # Check out the PR branch name (for PRs) or the pushed ref (for pushes)
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/setup-node@v4
        with:
          node-version: '18'   # match your Docker base image
          cache: 'npm'

      # Only validate on PRs
      - name: Validate lockfile (PRs only)
        id: validate
        if: github.event_name == 'pull_request'
        run: |
          set +e
          npm ci --dry-run >/dev/null 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          exit 0

      # Only regenerate on PRs when out of sync
      - name: Regenerate package-lock.json
        if: github.event_name == 'pull_request' && steps.validate.outputs.exit_code != '0'
        run: npm install --package-lock-only --no-audit --no-fund

      # Push back only for same-repo PRs
      - name: Commit & push updated lockfile (same-repo PRs)
        if: >
          github.event_name == 'pull_request' &&
          steps.validate.outputs.exit_code != '0' &&
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package-lock.json
          git commit -m "chore: sync package-lock.json with package.json [CI]" || echo "No changes"
          git push
          
  docker_build:
    needs: sync-lockfile
    runs-on: ubuntu-latest
    env:
      WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
      WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./
            image: ${{ vars.IMAGE_REGISTRY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Collect Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get First Docker Tag
        id: first-tag
        run: |
          echo "tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to ECR Container Registry
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.IMAGE_REGISTRY }}

      - name: Build Docker Image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ matrix.dockerfile }}
          load: true
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan Container with Wiz
        run: |
          curl -Lo wizcli https://wizcli.app.wiz.io/latest/wizcli-linux-amd64
          chmod +x wizcli
          ./wizcli auth
          ./wizcli docker scan --image "${{ steps.first-tag.outputs.tag }}" --dockerfile "${{ matrix.dockerfile }}Dockerfile" \
            -p "Default vulnerabilities policy" \
            -p "Default sensitive data policy" \
            -p "Default secrets policy" \
            -p "Default malware policy"
        continue-on-error: true

      - name: Pull Image for Wiz Tagging
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ steps.first-tag.outputs.tag }}

      - name: Tag Container with Wiz
        if: github.event_name != 'pull_request'
        run: |
          ./wizcli docker tag --image "${{ steps.first-tag.outputs.tag }}"
        continue-on-error: true

      - name: 💾 Install kubectl
        if: github.event_name != 'pull_request'
        uses: azure/setup-kubectl@v3

      - name: 💾 Install Helm
        if: github.event_name != 'pull_request'
        uses: azure/setup-helm@v4

      - name: 📡 Update kubeconfig for EKS
        if: github.event_name != 'pull_request'
        run: |
          aws eks update-kubeconfig \
            --region us-east-1 \
            --name ${{ vars.EKS_CLUSTER}}

      - name: 🌐 Get Backend service DNS
        if: github.event_name != 'pull_request'
        id: backend-url
        run: |
          BACKEND_SVC=$(kubectl get svc backend-sorcery-solutions-backend -n sorcery -o jsonpath="{.metadata.name}")
          echo "BACKEND_URL=http://${BACKEND_SVC}.sorcery.svc.cluster.local:8000" >> $GITHUB_ENV

      - name: 🚀 Deploy Frontend via Helm with ELB Ingress
        if: github.event_name != 'pull_request'
        run: |
          helm upgrade --install frontend ./helm/sorcery-solutions-frontend \
            --namespace sorcery \
            --set image.repository="${{ vars.IMAGE_REGISTRY }}" \
            --set-string env[0].name=NEXT_PUBLIC_API_BASE_URL \
            --set-string env[0].value="${{ env.BACKEND_URL }}" \
            --set service.type=LoadBalancer \
            --set service.port=80 \
            --set service.targetPort=3000 \
            --set ingress.enabled=false \
            --set 'service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-type=nlb' \
            --set 'service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-nlb-target-type=ip' \
            --set 'service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-scheme=internet-facing' \
            --set 'service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-cross-zone-load-balancing-enabled=true' \
            --set 'service.externalTrafficPolicy=Local' \
            --wait

      - name: 🌐 Wait for External ELB
        if: github.event_name != 'pull_request'
        run: |
          echo "⏳ Waiting for ELBs..."
          for i in {1..30}; do
            ELB_HOSTNAME=$(kubectl get service frontend-sorcery-solutions-frontend -n sorcery -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [[ ! -z "$ELB_HOSTNAME" ]]; then
              echo "✅ ELB Hostname: http://$ELB_HOSTNAME"
              echo "ELB_HOSTNAME=http://$ELB_HOSTNAME" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for ELB hostname..."
            sleep 10
          done

      - name: ✅ Done
        if: github.event_name != 'pull_request'
        run: |
          echo "Deployment complete! 🎉"
          echo "Frontend exposed at: ${{ env.ELB_HOSTNAME }}"